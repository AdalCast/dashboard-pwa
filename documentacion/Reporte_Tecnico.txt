================================================================================
                    REPORTE TÉCNICO - FINANZAS PWA
                          Versión 1.0 - 2025
================================================================================

INFORMACIÓN GENERAL
-------------------
Nombre de la Aplicación: Finanzas PWA
Versión: 1.0.0
Tipo: Progressive Web Application (PWA)
Fecha de Desarrollo: Octubre 2025
Repositorio: https://github.com/AdalCast/dashboard-pwa
Licencia: Privada


================================================================================
1. DESCRIPCIÓN DE LA APLICACIÓN
================================================================================

PROPÓSITO
---------
Finanzas PWA es una aplicación web progresiva diseñada para el control y 
gestión de finanzas personales. Permite a los usuarios registrar, categorizar 
y analizar sus ingresos y gastos, gestionar gastos fijos recurrentes, y 
realizar conversiones de divisas en tiempo real.

CARACTERÍSTICAS PRINCIPALES
----------------------------
✓ Dashboard financiero con estadísticas y gráficos
✓ Gestión completa de transacciones (ingresos/gastos)
✓ Control de gastos fijos mensuales
✓ Convertidor de divisas con 8 monedas
✓ Gráficos interactivos con Chart.js
✓ Funcionalidad offline (PWA)
✓ Diseño responsive (móvil, tablet, escritorio)
✓ Autenticación segura con bcrypt
✓ Instalable como app nativa en Android e iOS


================================================================================
2. ARQUITECTURA TÉCNICA
================================================================================

TIPO DE APLICACIÓN
-------------------
- Frontend: Single Page Application (SPA) con templates dinámicos
- Backend: API REST con Flask
- Base de Datos: Supabase (PostgreSQL)
- Patrón: Cliente-Servidor con autenticación basada en sesiones
- Despliegue: Docker Container

STACK TECNOLÓGICO
-----------------

BACKEND:
--------
• Python 3.11
• Flask 2.3.3 (Framework web)
• Flask-CORS 4.0.0 (Cross-Origin Resource Sharing)
• Gunicorn 21.2.0 (Servidor WSGI para producción)
• bcrypt 4.1.2 (Encriptación de contraseñas)
• python-dotenv 1.0.0 (Gestión de variables de entorno)

FRONTEND:
---------
• HTML5 (Templates Jinja2)
• CSS3 (Estilos personalizados)
• JavaScript ES6+ (Vanilla JS)
• Chart.js 3.9.1 (Gráficos interactivos)

BASE DE DATOS:
--------------
• Supabase 1.0.4 (SDK de Python)
• PostgreSQL (Base de datos relacional en Supabase)
• GoTrue 1.0.4 (Autenticación de Supabase)

PWA:
----
• Service Worker (Caché y funcionalidad offline)
• Web App Manifest (Instalación como app)
• Iconos optimizados (192x192 y 512x512)

CONTENEDORIZACIÓN:
------------------
• Docker (Imagen basada en python:3.11-slim)
• Puerto: 5000
• Workers: 4 procesos Gunicorn


================================================================================
3. APIS EXTERNAS UTILIZADAS
================================================================================

API #1: EXCHANGERATE-API
------------------------
Nombre: ExchangeRate-API
URL Base: https://api.exchangerate-api.com/v4/latest/
Versión: v4
Tipo: API REST pública
Autenticación: No requiere API key
Costo: Gratuita

PROPÓSITO:
----------
Obtener tipos de cambio actualizados en tiempo real para el convertidor 
de divisas de la aplicación.

ENDPOINT UTILIZADO:
-------------------
GET https://api.exchangerate-api.com/v4/latest/USD

PARÁMETROS:
-----------
- Base Currency: USD (Dólar estadounidense como moneda base)

RESPUESTA:
----------
Formato: JSON
Ejemplo de respuesta:
{
  "base": "USD",
  "date": "2025-10-21",
  "time_last_updated": 1729468801,
  "rates": {
    "EUR": 0.85,
    "MXN": 18.50,
    "GBP": 0.73,
    "JPY": 110.0,
    "CAD": 1.25,
    "AUD": 1.35,
    "CHF": 0.92,
    "USD": 1.0
  }
}

MONEDAS SOPORTADAS:
-------------------
• USD - Dólar Estadounidense
• EUR - Euro
• MXN - Peso Mexicano
• GBP - Libra Esterlina
• JPY - Yen Japonés
• CAD - Dólar Canadiense
• AUD - Dólar Australiano
• CHF - Franco Suizo

FRECUENCIA DE ACTUALIZACIÓN:
-----------------------------
- API: Se actualiza cada 24 horas
- Aplicación: Solicita datos cada vez que se carga la página de divisas
- Caché del navegador: 5 minutos

MANEJO DE ERRORES:
------------------
Si la API falla, la aplicación usa valores por defecto:
{
  'USD': 1,
  'EUR': 0.85,
  'MXN': 18.5,
  'GBP': 0.73,
  'JPY': 110,
  'CAD': 1.25,
  'AUD': 1.35,
  'CHF': 0.92
}

LÍMITES:
--------
- Gratuita sin límites para uso razonable
- No requiere registro
- Sin autenticación necesaria

CÓDIGO DE IMPLEMENTACIÓN:
--------------------------
Archivo: templates/currency.html
Función: loadExchangeRates()

async function loadExchangeRates() {
    try {
        const response = await fetch(
            'https://api.exchangerate-api.com/v4/latest/USD'
        );
        const data = await response.json();
        exchangeRates = data.rates;
        updateRatesTable();
        convertCurrency();
    } catch (error) {
        console.error('Error al cargar cotizaciones:', error);
        // Usar valores por defecto
    }
}


API #2: SUPABASE
----------------
Nombre: Supabase
Tipo: Backend as a Service (BaaS)
Autenticación: API Key (SUPABASE_KEY)
Costo: Plan gratuito

PROPÓSITO:
----------
Base de datos PostgreSQL administrada en la nube con autenticación y 
almacenamiento de datos de la aplicación.

FUNCIONALIDADES UTILIZADAS:
----------------------------
• PostgreSQL Database (Base de datos relacional)
• Row Level Security (Seguridad a nivel de fila)
• Real-time subscriptions (Actualizaciones en tiempo real)
• API REST automática (Generada automáticamente desde las tablas)

CONFIGURACIÓN:
--------------
URL: Definida en variable de entorno SUPABASE_URL
Key: Definida en variable de entorno SUPABASE_KEY

TABLAS UTILIZADAS:
------------------

1. Usuarios
   - id (UUID, Primary Key)
   - email (String, Unique)
   - password_hash (String, bcrypt)
   - nombre (String)
   - telefono (String, Opcional)
   - created_at (Timestamp)

2. Transacciones
   - id (UUID, Primary Key)
   - user_id (UUID, Foreign Key → Usuarios)
   - fecha (Date)
   - tipo (String: 'ingreso' | 'gasto')
   - categoria (String)
   - monto (Decimal)
   - descripcion (Text)
   - created_at (Timestamp)

3. Gastos_fijos
   - id (UUID, Primary Key)
   - user_id (UUID, Foreign Key → Usuarios)
   - descripcion (String)
   - categoria (String)
   - monto (Decimal)
   - dia_pago (Integer, 1-31)
   - frecuencia (String: 'mensual' | 'bimestral' | 'trimestral' | 'anual')
   - created_at (Timestamp)

SEGURIDAD:
----------
• Row Level Security (RLS) habilitado
• Cada usuario solo puede ver/modificar sus propios datos
• Políticas de seguridad por tabla:
  - SELECT: WHERE user_id = auth.uid()
  - INSERT: WITH CHECK (user_id = auth.uid())
  - UPDATE: WHERE user_id = auth.uid()
  - DELETE: WHERE user_id = auth.uid()

CÓDIGO DE IMPLEMENTACIÓN:
--------------------------
Archivo: app.py
Cliente Supabase:

from supabase import create_client, Client

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Ejemplo de consulta
response = supabase.table('Transacciones')\
    .select('*')\
    .eq('user_id', user_id)\
    .execute()


================================================================================
4. MÓDULOS Y DEPENDENCIAS
================================================================================

DEPENDENCIAS DE PYTHON (requirements.txt)
------------------------------------------

Flask==2.3.3
Descripción: Framework web minimalista para Python
Uso: Servidor web, routing, templates, sesiones
Licencia: BSD-3-Clause

Flask-CORS==4.0.0
Descripción: Manejo de Cross-Origin Resource Sharing
Uso: Permitir peticiones desde diferentes orígenes
Licencia: MIT

python-dotenv==1.0.0
Descripción: Cargar variables de entorno desde .env
Uso: Gestión de configuración sensible (API keys, secrets)
Licencia: BSD

supabase==1.0.4
Descripción: SDK oficial de Supabase para Python
Uso: Cliente para interactuar con Supabase
Licencia: MIT

gotrue==1.0.4
Descripción: Cliente de autenticación de Supabase
Uso: Gestión de autenticación de usuarios
Licencia: MIT

gunicorn==21.2.0
Descripción: Servidor WSGI HTTP para Python
Uso: Servidor de producción para Flask
Licencia: MIT

bcrypt==4.1.2
Descripción: Librería de hashing de contraseñas
Uso: Encriptación segura de contraseñas de usuarios
Licencia: Apache 2.0

DEPENDENCIAS DE FRONTEND
-------------------------

Chart.js 3.9.1
Descripción: Librería de gráficos JavaScript
Uso: Gráficos de pastel en el dashboard
CDN: https://cdn.jsdelivr.net/npm/chart.js
Licencia: MIT


================================================================================
5. ESTRUCTURA DEL PROYECTO
================================================================================

DashboardPWA/
│
├── app.py                      # Aplicación principal Flask
├── create_password.py          # Utilidad para crear hashes
├── requirements.txt            # Dependencias Python
├── Dockerfile                  # Configuración Docker
├── .dockerignore              # Archivos excluidos de Docker
├── .env                       # Variables de entorno (no en Git)
├── .env.example               # Plantilla de variables
├── .gitignore                 # Archivos ignorados por Git
├── README.md                  # Documentación principal
│
├── static/                    # Archivos estáticos
│   ├── css/
│   │   └── style.css          # Estilos personalizados
│   ├── js/
│   │   ├── app.js             # JavaScript principal
│   │   └── sw.js              # Service Worker (PWA)
│   └── icons/
│       ├── icon-192x192.png   # Icono PWA 192px
│       └── icon-512x512.png   # Icono PWA 512px
│
├── templates/                 # Templates HTML (Jinja2)
│   ├── base.html              # Template base
│   ├── login.html             # Página de login
│   ├── dashboard.html         # Dashboard principal
│   ├── transactions.html      # Gestión de transacciones
│   ├── fixed_expenses.html    # Gastos fijos
│   ├── currency.html          # Convertidor de divisas
│   └── profile.html           # Perfil de usuario
│
└── documentacion/             # Documentación
    ├── README.md              # Índice de documentación
    ├── Manual_Usuario.txt     # Manual completo
    ├── Manual de Usuario.pdf  # Manual en PDF
    └── Reporte_Tecnico.txt    # Este archivo


================================================================================
6. FUNCIONALIDADES DETALLADAS
================================================================================

MÓDULO: AUTENTICACIÓN
----------------------
Archivo: app.py
Funciones clave:
- login_required() - Decorator para proteger rutas
- hash_password() - Crear hash bcrypt
- verify_password() - Verificación híbrida bcrypt/Werkzeug
- /api/login - Endpoint de inicio de sesión
- /api/logout - Endpoint de cierre de sesión

Seguridad:
• Contraseñas hasheadas con bcrypt (cost factor: 12)
• Sesiones Flask con secret key
• Verificación híbrida (soporta migración de hashes)
• Timeout de sesión

MÓDULO: DASHBOARD
------------------
Archivo: templates/dashboard.html
Funcionalidades:
- Estadísticas mensuales (ingresos, gastos, balance)
- Gráfico de pastel por categorías (Chart.js)
- Lista de últimas 10 transacciones
- Selector de mes con navegación
- Actualización dinámica vía AJAX

APIs utilizadas:
- /api/dashboard/stats/<mes>/<año>
- /api/transactions/recent

MÓDULO: TRANSACCIONES
----------------------
Archivo: templates/transactions.html
Funcionalidades:
- Tabla completa de transacciones
- Filtros por mes y tipo (ingreso/gasto)
- Formulario de nueva transacción
- Edición inline
- Eliminación con confirmación
- Categorización automática

Categorías de Ingresos:
• Salario, Negocio, Regalo, Inversión, Otro

Categorías de Gastos:
• Alimentación, Transporte, Vivienda, Servicios
• Salud, Entretenimiento, Ropa, Educación, Otro

APIs utilizadas:
- GET /api/transactions/<mes>/<año>
- POST /api/transactions
- PUT /api/transactions/<id>
- DELETE /api/transactions/<id>

MÓDULO: GASTOS FIJOS
--------------------
Archivo: templates/fixed_expenses.html
Funcionalidades:
- Listado de gastos recurrentes
- Cálculo de total mensual
- Próximo pago destacado
- Gestión CRUD completa
- Frecuencias: mensual, bimestral, trimestral, anual

APIs utilizadas:
- GET /api/fixed-expenses
- POST /api/fixed-expenses
- PUT /api/fixed-expenses/<id>
- DELETE /api/fixed-expenses/<id>

MÓDULO: CONVERTIDOR DE DIVISAS
-------------------------------
Archivo: templates/currency.html
Funcionalidades:
- Conversión en tiempo real entre 8 monedas
- Tabla de cotizaciones actualizadas
- Botón de intercambio de monedas
- Indicadores de tendencia (↗ ↘)
- Cálculo automático al escribir
- Manejo de errores con valores fallback

API externa:
- ExchangeRate-API (v4)

MÓDULO: PERFIL
--------------
Archivo: templates/profile.html
Funcionalidades:
- Ver datos del usuario
- Editar nombre y teléfono
- Cambiar contraseña
- Preferencias de notificaciones
- Cerrar sesión

APIs utilizadas:
- GET /api/user
- PUT /api/user
- POST /api/change-password

MÓDULO: PWA
-----------
Archivo: static/js/sw.js
Funcionalidades:
- Service Worker para caché
- Funcionalidad offline
- Instalación como app
- Actualización automática
- Push notifications (preparado)

Archivos cacheados:
- /, /dashboard, /transactions
- CSS y JS principales
- Iconos e imágenes
- Manifest.json


================================================================================
7. BASE DE DATOS
================================================================================

PROVEEDOR: Supabase (PostgreSQL 15)
TIPO: Relacional (SQL)
UBICACIÓN: Cloud (región configurada en Supabase)

ESQUEMA DE TABLAS
-----------------

Tabla: Usuarios
---------------
CREATE TABLE Usuarios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    nombre VARCHAR(255),
    telefono VARCHAR(50),
    created_at TIMESTAMP DEFAULT NOW()
);

Índices:
- PRIMARY KEY en id
- UNIQUE en email
- INDEX en email (para búsquedas rápidas)

Tabla: Transacciones
--------------------
CREATE TABLE Transacciones (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES Usuarios(id) ON DELETE CASCADE,
    fecha DATE NOT NULL,
    tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('ingreso', 'gasto')),
    categoria VARCHAR(50) NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    descripcion TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);

Índices:
- PRIMARY KEY en id
- FOREIGN KEY en user_id
- INDEX en (user_id, fecha) para consultas rápidas por usuario y fecha
- INDEX en tipo para filtrado rápido

Tabla: Gastos_fijos
-------------------
CREATE TABLE Gastos_fijos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES Usuarios(id) ON DELETE CASCADE,
    descripcion VARCHAR(255) NOT NULL,
    categoria VARCHAR(50) NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    dia_pago INTEGER CHECK (dia_pago >= 1 AND dia_pago <= 31),
    frecuencia VARCHAR(20) CHECK (frecuencia IN 
        ('mensual', 'bimestral', 'trimestral', 'anual')),
    created_at TIMESTAMP DEFAULT NOW()
);

Índices:
- PRIMARY KEY en id
- FOREIGN KEY en user_id
- INDEX en (user_id, dia_pago) para recordatorios

POLÍTICAS DE SEGURIDAD (RLS)
-----------------------------

Todas las tablas tienen Row Level Security habilitado:

-- Usuarios pueden ver solo sus propios datos
ALTER TABLE Transacciones ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own transactions"
ON Transacciones FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own transactions"
ON Transacciones FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own transactions"
ON Transacciones FOR UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own transactions"
ON Transacciones FOR DELETE
USING (auth.uid() = user_id);

BACKUP Y RECUPERACIÓN
----------------------
- Backups automáticos diarios (Supabase)
- Point-in-time recovery disponible
- Retención: 7 días (plan gratuito)


================================================================================
8. SEGURIDAD
================================================================================

AUTENTICACIÓN
-------------
• Contraseñas hasheadas con bcrypt (cost: 12 rounds)
• Sistema híbrido bcrypt + Werkzeug para migración
• Sesiones Flask con secret key segura
• Timeout de sesión automático

COMUNICACIÓN
------------
• HTTPS obligatorio en producción
• CORS configurado apropiadamente
• Headers de seguridad HTTP

DATOS
-----
• Row Level Security (RLS) en Supabase
• Validación de entrada en frontend y backend
• Sanitización de datos
• Políticas de privacidad por usuario

VARIABLES SENSIBLES
-------------------
• .env para configuración local (no en Git)
• .env.example como plantilla pública
• Variables de entorno en producción (Docker/EasyPanel)

Variables requeridas:
- FLASK_SECRET_KEY (generada aleatoriamente)
- SUPABASE_URL (endpoint de Supabase)
- SUPABASE_KEY (API key anónima de Supabase)

PROTECCIÓN CONTRA ATAQUES
--------------------------
• SQL Injection: Prevención con ORM de Supabase
• XSS: Escape automático en templates Jinja2
• CSRF: Tokens en formularios (preparado)
• Brute Force: Rate limiting recomendado (por implementar)

BUENAS PRÁCTICAS
----------------
✓ Principle of Least Privilege
✓ Separación de configuración y código
✓ Validación de datos en cliente y servidor
✓ Logging de actividades críticas
✓ Actualizaciones regulares de dependencias


================================================================================
9. DEPLOYMENT (DESPLIEGUE)
================================================================================

PLATAFORMA RECOMENDADA: EasyPanel
----------------------------------

REQUISITOS PREVIOS:
-------------------
✓ Cuenta en Supabase con proyecto creado
✓ Repositorio Git (GitHub) con código actualizado
✓ Variables de entorno preparadas
✓ Dockerfile configurado

PROCESO DE DESPLIEGUE:
----------------------

1. PREPARACIÓN EN SUPABASE:
   - Crear proyecto en Supabase
   - Crear las tablas necesarias (Usuarios, Transacciones, Gastos_fijos)
   - Habilitar Row Level Security
   - Configurar políticas de seguridad
   - Obtener SUPABASE_URL y SUPABASE_KEY

2. CONFIGURACIÓN EN EASYPANEL:
   - Crear nueva aplicación tipo Docker
   - Conectar repositorio GitHub
   - Configurar build desde Dockerfile
   - Puerto expuesto: 5000
   - Configurar variables de entorno:
     * FLASK_SECRET_KEY
     * SUPABASE_URL
     * SUPABASE_KEY

3. DESPLIEGUE:
   - Push a GitHub (rama main)
   - EasyPanel detecta cambios automáticamente
   - Build de imagen Docker
   - Deploy con 4 workers Gunicorn
   - Health check en puerto 5000

DOCKERFILE CONFIGURACIÓN:
--------------------------
FROM python:3.11-slim
WORKDIR /app
RUN apt-get update && apt-get install -y gcc
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 5000
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", 
     "--timeout", "120", "app:app"]

RECURSOS RECOMENDADOS:
----------------------
- CPU: 1 vCPU mínimo
- RAM: 512 MB mínimo
- Storage: 1 GB
- Workers: 4 procesos Gunicorn
- Timeout: 120 segundos

MONITOREO:
----------
- Logs de aplicación en EasyPanel dashboard
- Métricas de Supabase en dashboard de Supabase
- Health checks automáticos cada 30 segundos

DOMINIO Y SSL:
--------------
- Dominio personalizado configurable en EasyPanel
- SSL/TLS automático con Let's Encrypt
- Redirección HTTP → HTTPS


================================================================================
10. RENDIMIENTO Y OPTIMIZACIÓN
================================================================================

FRONTEND
--------
• Minificación de CSS/JS (recomendado para producción)
• Lazy loading de imágenes
• Service Worker para caché de assets
• Compresión Gzip habilitada
• CDN para Chart.js

BACKEND
-------
• Gunicorn con 4 workers (concurrencia)
• Timeout de 120 segundos
• Conexión persistente a Supabase
• Caché de sesiones en memoria

BASE DE DATOS
-------------
• Índices en columnas frecuentemente consultadas
• Queries optimizadas con Supabase SDK
• Row Level Security sin impacto significativo
• Paginación recomendada para grandes datasets

API EXTERNA
-----------
• Caché de tipos de cambio (5 minutos)
• Fallback a valores predeterminados
• Timeout de requests: 10 segundos
• Retry logic con backoff exponencial

PWA
---
• Service Worker con estrategia cache-first
• Offline mode para páginas visitadas
• Precaché de assets críticos
• Update notification para nuevas versiones

MÉTRICAS OBJETIVO
-----------------
• Time to First Byte (TTFB): < 500ms
• First Contentful Paint (FCP): < 1.5s
• Time to Interactive (TTI): < 3s
• Lighthouse Score: > 90/100


================================================================================
11. TESTING (PRUEBAS)
================================================================================

PRUEBAS MANUALES REALIZADAS:
-----------------------------

✓ Autenticación:
  - Login correcto
  - Login con credenciales incorrectas
  - Logout
  - Protección de rutas

✓ Dashboard:
  - Visualización de estadísticas
  - Gráficos con datos reales
  - Navegación entre meses
  - Cálculos correctos de balance

✓ Transacciones:
  - Crear ingreso
  - Crear gasto
  - Editar transacción
  - Eliminar transacción
  - Filtros por mes y tipo

✓ Gastos Fijos:
  - Agregar gasto fijo
  - Editar gasto fijo
  - Eliminar gasto fijo
  - Cálculo de total mensual

✓ Convertidor:
  - Conversión entre monedas
  - Actualización de cotizaciones
  - Manejo de errores de API
  - Tabla de cotizaciones

✓ PWA:
  - Instalación en Android
  - Instalación en iOS
  - Funcionalidad offline
  - Service Worker activo

✓ Responsive:
  - Móvil (320px - 767px)
  - Tablet (768px - 1024px)
  - Desktop (1025px+)

PRUEBAS PENDIENTES (Recomendadas):
-----------------------------------
⚠ Unit tests con pytest
⚠ Integration tests
⚠ Load testing
⚠ Security testing (penetration)
⚠ Cross-browser testing


================================================================================
12. LIMITACIONES CONOCIDAS
================================================================================

FUNCIONALES
-----------
• No permite categorías personalizadas (categorías fijas)
• No hay exportación a PDF/Excel
• Sin metas de ahorro automáticas
• No genera transacciones automáticas desde gastos fijos
• Límite de 8 monedas en convertidor
• Sin notificaciones push (preparado pero no implementado)

TÉCNICAS
--------
• API de divisas actualiza solo cada 24 horas
• Sin soporte para múltiples cuentas bancarias
• No hay API pública para terceros
• Cache offline limitado (por limitaciones de PWA en iOS)
• Sin soporte para archivos adjuntos en transacciones

SEGURIDAD
---------
• Sin autenticación de dos factores (2FA)
• Sin rate limiting implementado
• Sin logs de auditoría
• Recovery de contraseña manual (contacto con admin)

COMPATIBILIDAD
--------------
• Notificaciones push no disponibles en iOS
• Service Worker limitado en iOS Safari
• Requiere navegadores modernos (2020+)


================================================================================
13. ROADMAP (FUTURAS MEJORAS)
================================================================================

VERSIÓN 1.1 (Planificada)
--------------------------
□ Exportación a PDF y Excel
□ Categorías personalizables por usuario
□ Metas de ahorro con seguimiento
□ Gráficos adicionales (barras, líneas)
□ Dark mode (tema oscuro)

VERSIÓN 1.2 (Planificada)
--------------------------
□ Múltiples cuentas bancarias
□ Presupuestos por categoría
□ Recordatorios de pagos
□ Notificaciones push
□ Importación de CSV/Excel

VERSIÓN 2.0 (Planificada)
--------------------------
□ App móvil nativa (React Native)
□ Sincronización con bancos
□ Análisis con IA/ML
□ Reportes avanzados
□ Multi-usuario (familias)
□ API pública


================================================================================
14. TROUBLESHOOTING (SOLUCIÓN DE PROBLEMAS)
================================================================================

PROBLEMA: No se puede hacer login
SOLUCIÓN:
1. Verificar credenciales
2. Revisar conexión a Supabase
3. Verificar que SUPABASE_URL y SUPABASE_KEY estén correctos
4. Revisar logs de aplicación

PROBLEMA: Gráficos no se muestran
SOLUCIÓN:
1. Verificar que Chart.js esté cargado (CDN)
2. Comprobar datos en consola del navegador
3. Verificar que haya transacciones en el mes seleccionado

PROBLEMA: API de divisas no responde
SOLUCIÓN:
1. Verificar conexión a internet
2. La app usará valores por defecto automáticamente
3. Esperar 5 minutos y recargar página
4. Verificar logs de consola del navegador

PROBLEMA: PWA no se instala
SOLUCIÓN:
Android:
1. Usar Chrome (no otro navegador)
2. Verificar que HTTPS esté habilitado
3. Revisar que manifest.json sea accesible
4. Limpiar caché del navegador

iOS:
1. Usar Safari exclusivamente
2. Ir a Compartir → Agregar a pantalla de inicio
3. Verificar que sea HTTPS

PROBLEMA: Service Worker no actualiza
SOLUCIÓN:
1. Forzar actualización: Ctrl+Shift+R (o Cmd+Shift+R)
2. Limpiar caché del navegador
3. Desregistrar Service Worker en DevTools
4. Reinstalar PWA

PROBLEMA: Supabase error 401
SOLUCIÓN:
1. Verificar SUPABASE_KEY
2. Revisar políticas RLS en Supabase
3. Verificar que el usuario esté autenticado
4. Regenerar API key si es necesario


================================================================================
15. MANTENIMIENTO
================================================================================

TAREAS DIARIAS
--------------
• Revisar logs de errores
• Monitorear uso de recursos
• Verificar disponibilidad de APIs externas

TAREAS SEMANALES
----------------
• Revisar métricas de rendimiento
• Backup manual (si necesario)
• Actualizar documentación si hay cambios

TAREAS MENSUALES
----------------
• Actualizar dependencias de Python
• Revisar y optimizar queries de base de datos
• Análisis de seguridad
• Revisar storage usage en Supabase

TAREAS TRIMESTRALES
-------------------
• Auditoría de seguridad completa
• Optimización de rendimiento
• Revisión de roadmap
• Actualización de documentación técnica

ACTUALIZACIONES DE DEPENDENCIAS
--------------------------------
Comando: pip list --outdated
Proceso:
1. Revisar changelog de cada dependencia
2. Actualizar en entorno de desarrollo
3. Ejecutar tests
4. Deploy a staging
5. Deploy a producción

BACKUPS
-------
Automáticos (Supabase):
• Daily backups (retención 7 días)
• Point-in-time recovery

Manuales recomendados:
• Exportar datos mensualmente
• Guardar en múltiples ubicaciones
• Documentar proceso de restauración


================================================================================
16. CONTACTO Y SOPORTE
================================================================================

DESARROLLADOR
-------------
Repositorio: https://github.com/AdalCast/dashboard-pwa
Registro: https://adalbertocasteleiro.castech.cloud/asistente

DOCUMENTACIÓN
-------------
• Manual de Usuario: documentacion/Manual_Usuario.txt
• Manual en PDF: documentacion/Manual de Usuario.pdf
• README: documentacion/README.md
• Video Tutorial: https://drive.google.com/file/d/1_mma0jKMKTZDOYNL77x2fhY_YGyat251/view?usp=sharing

RECURSOS EXTERNOS
-----------------
• Flask: https://flask.palletsprojects.com/
• Supabase: https://supabase.com/docs
• Chart.js: https://www.chartjs.org/docs/
• ExchangeRate-API: https://www.exchangerate-api.com/docs


================================================================================
17. CHANGELOG (HISTORIAL DE CAMBIOS)
================================================================================

VERSIÓN 1.0.0 (Octubre 2025) - LANZAMIENTO INICIAL
---------------------------------------------------
✓ Sistema de autenticación con bcrypt
✓ Dashboard con estadísticas y gráficos
✓ Gestión completa de transacciones
✓ Control de gastos fijos
✓ Convertidor de divisas (8 monedas)
✓ PWA con funcionalidad offline
✓ Diseño responsive
✓ Dockerización
✓ Despliegue en EasyPanel
✓ Documentación completa
✓ Manual de usuario
✓ Video tutorial


================================================================================
18. LICENCIA Y DERECHOS
================================================================================

LICENCIA
--------
© 2025 Finanzas PWA
Todos los derechos reservados
Uso privado

DEPENDENCIAS
------------
Todas las dependencias utilizan licencias open source:
• Flask: BSD-3-Clause
• Chart.js: MIT
• bcrypt: Apache 2.0
• Supabase SDK: MIT

APIs EXTERNAS
-------------
• ExchangeRate-API: Free tier sin atribución requerida
• Supabase: Términos de servicio de Supabase


================================================================================
19. GLOSARIO TÉCNICO
================================================================================

API (Application Programming Interface)
Interfaz de programación de aplicaciones. Conjunto de funciones y procedimientos
que permiten la comunicación entre componentes de software.

bcrypt
Función de hashing de contraseñas diseñada para ser lenta y resistente
a ataques de fuerza bruta.

CDN (Content Delivery Network)
Red de servidores distribuidos geográficamente para entregar contenido
web de forma más rápida.

CORS (Cross-Origin Resource Sharing)
Mecanismo que permite que recursos restringidos en una página web sean
solicitados desde otro dominio.

Docker
Plataforma de contenedores que permite empaquetar aplicaciones con todas
sus dependencias.

Gunicorn (Green Unicorn)
Servidor HTTP WSGI para aplicaciones Python, diseñado para producción.

JWT (JSON Web Token)
Estándar abierto para crear tokens de acceso que permiten la autenticación.

ORM (Object-Relational Mapping)
Técnica de programación para convertir datos entre sistemas incompatibles
usando programación orientada a objetos.

PWA (Progressive Web Application)
Aplicación web que utiliza capacidades modernas para ofrecer experiencia
similar a app nativa.

REST (Representational State Transfer)
Estilo de arquitectura de software para sistemas distribuidos, especialmente
para servicios web.

RLS (Row Level Security)
Sistema de seguridad en bases de datos que permite filtrar filas según
el usuario autenticado.

Service Worker
Script que el navegador ejecuta en segundo plano, separado de la página web,
que permite funcionalidades como caché offline.

WebSocket
Protocolo de comunicación bidireccional sobre TCP para aplicaciones en tiempo
real.

WSGI (Web Server Gateway Interface)
Especificación que describe cómo un servidor web se comunica con aplicaciones
web en Python.


================================================================================
RESUMEN EJECUTIVO
================================================================================

APLICACIÓN: Finanzas PWA
VERSIÓN: 1.0.0
ESTADO: Producción

TECNOLOGÍAS CLAVE:
• Backend: Python 3.11 + Flask 2.3.3
• Frontend: HTML5 + CSS3 + JavaScript ES6
• Base de Datos: PostgreSQL (Supabase)
• Despliegue: Docker + EasyPanel
• PWA: Service Worker + Manifest

APIS UTILIZADAS:
1. ExchangeRate-API (Gratuita)
   - Conversión de divisas en tiempo real
   - 8 monedas soportadas
   - Sin autenticación requerida

2. Supabase (Backend as a Service)
   - Base de datos PostgreSQL
   - Autenticación y seguridad RLS
   - API REST automática

CARACTERÍSTICAS DESTACADAS:
✓ 100% funcional offline (PWA)
✓ Instalable en móviles (Android/iOS)
✓ Seguridad con encriptación bcrypt
✓ Diseño responsive
✓ Gráficos interactivos
✓ Tiempo real en conversiones

MÉTRICAS:
• Usuarios: Ilimitados
• Transacciones: Sin límite
• Categorías: 13 predefinidas
• Monedas: 8 principales
• Uptime objetivo: 99.9%

================================================================================
FIN DEL REPORTE TÉCNICO
Fecha: 21 de Octubre de 2025
Versión del documento: 1.0
================================================================================
